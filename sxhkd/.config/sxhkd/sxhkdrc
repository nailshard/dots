#
# wm independent hotkeys
#


XF86AudioRaiseVolume
    pamixer -i 5
XF86AudioLowerVolume
    pamixer -d 5
XF86AudioMute
    pamixer -t
XF86AudioMicMute
    ~/bin/mute-mic

XF86MonBrightnessUp
    light -A 1
XF86MonBrightnessDown
    light -U 1
super + XF86MonBrightnessUp
    light -A 5
super + XF86MonBrightnessDown
    light -U 5

super + shift + v
    ~/bin/vpn -t office-vpn

# terminal emulator
super + Return
    ~/bin/terminal
	#alacritty -e tmux
super + shift + Return
	/usr/bin/chromium

# program launcher
super + d
    ~/bin/launcher drun
super + Tab
    ~/bin/launcher window
super + r
    ~/bin/launcher run
#    rofi -show window
#  rofi -show drun
#	dmenu_run

super + e
    ranger

super + @space
   ~/bin/scratchy
super + v
    pavucontrol
# make sxhkd reload its configuration files:
super + BackSpace
	pkill -USR1 -x sxhkd; \
    notify-send "sxhkd config reloadde"
ctrl + super + BackSpace
    xscreensaver-command -lock
#
# bspwm hotkeys
#

# quit bspwm normally
super + alt + Escape
	bspc quit

# close and kill
super + {_,shift + }w
	bspc node -{c,k}

# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next

# send the newest marked node to the newest preselected node
super + y
	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest node
super + g
	bspc node -s biggest

#
# state/flags
#

# set the window state
super + {t,shift + t,s,f}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

#
# focus/swap
#
# Focus node
# If no window exist, target monitor/desktop instead
super + k
  bspc node -f north || bspc monitor -f north
super + j
  bspc node -f south || bspc monitor -f south
super + h
  bspc node -f west || bspc monitor -f west || bspc desktop -f west
super + l
  bspc node -f east || bspc monitor -f east || bspc desktop -f east

# Swap node
# If no node exist, send node to monitor instead
super + shift + h
  if ! bspc node -s west.local; then bspc node -m west && bspc node $(bspc query -N -n last) -f; fi
super + shift + l
  if ! bspc node -s east.local; then bspc node -m east && bspc node $(bspc query -N -n last) -f; fi
super + shift + k
  if ! bspc node -s north.local; then bspc node -m north && bspc node $(bspc query -N -n last) -f; fi
super + shift + j
  if ! bspc node -s south.local; then bspc node -m south && bspc node $(bspc query -N -n last) -f; fi

#
# focus the node in the given direction
#super + ctrl {h,j,k,l}

#    ~/bin/sxhkd/movenode {west,south,north,east}
#super + shift + {h,j,k,l}
 #   ~/bin/sxhkd/swapnode {west,south,north,east}
	#bspc node -s {west,south,north,east}
#super + {h,j,k,l}
#    bspc config pointer_follows_monitor true; \
#    bspc config pointer_follows_focus true; \
#    dir={west,south,north,east}; \
#    if ! bspc node -f $dir; then \
#        bspc monitor -f $dir; \
#    fi; \
#    bspc config pointer_follows_monitor false; \
#    bspc config pointer_follows_focus false

#super + shift + {h,j,k,l}
#    bspc config pointer_follows_focus true; \
#    cur_win=$(bspc query -M -n) \
#    cur_mon=$(bspc query -M -m); \
#    dir={west,south,north,east}; \
#    echo $dir; \
#    if ! bspc node -f $dir; then \
#        bspc node -m $dir; \
#        bspc monitor -f $dir; \
#    else \
#        new_mon=$(bspc query -M -m); \
#        if [ "$new_mon" = "$cur_mon" ]; then \
#            bspc node -s $cur_win; \
#        else \
#            bspc node $cur_win -m ^$new_mon; \
#        fi; \
#        bspc node -f $cur_win; \
#    fi; \
#    bspc config pointer_follows_focus false

# focus the node for the given path jump
super + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}
#super + {<,>}
#bspc config window_gap $(echo $(bspc config window_gap){-,+}4|bc)
# focus the next/previous node in the current desktop
super + {_,shift + }c
	bspc node -f {next,prev}.local

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local

# focus the last node/desktop
super + {grave,Tab}
	bspc {node,desktop} -f last

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus or send to the given desktop
#super + {_,shift + }{1-9,0}
#	bspc {desktop -f,node -d} '^{1-9,10}'
#super + {_,shift + }{1-9,0}
#    bspc {desktop -f, window -d} $(bspc query -M -m)/{a,b,c}
# focus or send to the given desktop
super + {_,shift + }{1-9,0}
    bspc {desktop -f,node -d} {1-9,10}
    #bspc {desktop -f,node -d} $(bspc query -M -m)/'^{1-9,10}'
super + ctrl + {_,shift +} {1-9}
	bspc {monitor -f, node -m} '^{1-9}'
super + w
    bspc monitor -f next
super + ctrl + s
    echo "~/bin/wp" ; \
    ~/bin/wp
super + shift + ctrl + s
    ~/bin/monitors
#
# preselect
#

# preselect the direction
super + alt + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
super + alt + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + alt + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + alt + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward
super + ctrl + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + ctrl + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}
